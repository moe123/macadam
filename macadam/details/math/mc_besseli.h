//
// # -*- coding: utf-8, tab-width: 3 -*-

// mc_besseli.h
//
// Copyright (C) 2019 Moe123. All rights reserved.
//

#include <macadam/details/math/mc_exp.h>
#include <macadam/details/math/mc_isinf.h>
#include <macadam/details/math/mc_isnan.h>
#include <macadam/details/math/mc_rsqrt.h>
#include <macadam/details/math/mc_sqr.h>
#include <macadam/details/math/mc_xchebevaln.h>

#ifndef MC_BESSELI_H
#define MC_BESSELI_H

#pragma mark - mc_besseli0_approx0 -

MC_TARGET_PROC float mc_besseli0f_approx0(float x)
{
	float r  = 1;
	int   t  = 0;
	float i0 = 0;
	do {
		i0 += r; ++t; r *= mc_sqrf(x) / (4.0f * t * t);
	} while (r > MCLIMITS_EPSILONF * i0);
	return i0;
}

MC_TARGET_PROC double mc_besseli0_approx0(double x)
{
	double r  = 1;
	int    t  = 0;
	double i0 = 0;
	do {
		i0 += r; ++t; r *= mc_sqr(x) / (4.0 * t * t);
	} while (r > MCLIMITS_EPSILON * i0);
	return i0;
}

MC_TARGET_PROC long double mc_besseli0l_approx0(long double x)
{
	long double r  = 1;
	int         t  = 0;
	long double i0 = 0;
	do {
		i0 += r; ++t; r *= mc_sqrl(x) / (4.0L * t * t);
	} while (r > MCLIMITS_EPSILONL * i0);
	return i0;
}

#pragma mark - mc_besseli1_approx0 -

MC_TARGET_PROC float mc_besseli1f_approx0(float x)
{
	float r  = 0.5f * x;
	int   t  = 0;
	float i1 = 0;
	do {
		i1 += r; ++t; r *= mc_sqrf(x) / (4.0f * t * (t + 1));
	} while (r > MCLIMITS_EPSILONF * i1);
	return i1;
}

MC_TARGET_PROC double mc_besseli1_approx0(double x)
{
	double r  = 0.5 * x;
	int    t  = 0;
	double i1 = 0;
	do { 
		i1 += r; ++t; r *= mc_sqr(x) / (4.0 * t * (t + 1));
	} while (r > MCLIMITS_EPSILON * i1);
	return i1;
}

MC_TARGET_PROC long double mc_besseli1l_approx0(long double x)
{
	long double r  = 0.5L * x;
	int         t  = 0;
	long double i1 = 0;
	do {
		i1 += r; ++t; r *= mc_sqrl(x) / (4.0L * t * (t + 1));
	} while (r > MCLIMITS_EPSILONL * i1);
	return i1;
}

#pragma mark - mc_besselin_approx0 -

MC_TARGET_PROC float mc_besselinf_approx0(int n, float x)
{
	float i0 = mc_besseli0f_approx0(x);
	float i1 = mc_besseli1f_approx0(x);
	float in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0f / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC double mc_besselin_approx0(int n, double x)
{
	double i0 = mc_besseli0_approx0(x);
	double i1 = mc_besseli1_approx0(x);
	double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0 / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC long double mc_besselinl_approx0(int n, long double x)
{
	long double i0 = mc_besseli0l_approx0(x);
	long double i1 = mc_besseli1l_approx0(x);
	long double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0L / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

#pragma mark - mc_besseli0_approx1 -

MC_TARGET_PROC float mc_besseli0f_approx1(float x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	float a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	float b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5f) {
		a1 = +0.1682f;   a2 = +0.1472f;  a3 = +0.4450f;  a4 = +0.2382f;
		b1 = +0.7536f;   b2 = +0.9739f;  b3 = -0.715f;   b4 = +0.2343f;
	} else if (x < 20.0f) {
		a1 = +0.2667f;   a2 = +0.4916f;  a3 = +0.1110f;  a4 = +0.1304f;
		b1 = +0.4710f;   b2 = -163.4f;   b3 = +0.9852f;  b4 = +0.8554f;
	} else if (x < 37.25f) {
		a1 = +0.1121f;   a2 = 0.1055f;   a3 = -0.00018f; a4 = +0.00326f;
		b1 = +0.9807f;   b2 = 0.8672f;   b3 = +1.0795f;  b4 = +1.0385f;
	} else {
		a1 = +2.41E-9f;  a2 = +0.06745f; a3 = +0.05471f; a4 = +0.5686f;
		b1 = +1.144f;    b2 = +0.995f;   b3 = +0.5686f;  b4 = +0.946f;
	}
	return (a1 * mc_expf(x * b1) + a2 * mc_expf(x * b2) + a3 * mc_expf(x * b3) + a4 * mc_expf(x * b4));
}

#pragma mark - mc_besseli0_approx1 -

MC_TARGET_PROC double mc_besseli0_approx1(double x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	double a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	double b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5) {
		a1 = +0.1682;   a2 = +0.1472;  a3 = +0.4450;  a4 = +0.2382;
		b1 = +0.7536;   b2 = +0.9739;  b3 = -0.715;   b4 = +0.2343;
	} else if (x < 20.0) {
		a1 = +0.2667;   a2 = +0.4916;  a3 = +0.1110;  a4 = +0.1304;
		b1 = +0.4710;   b2 = -163.4;   b3 = +0.9852;  b4 = +0.8554;
	} else if (x < 37.25) {
		a1 = +0.1121;   a2 = 0.1055;   a3 = -0.00018; a4 = +0.00326;
		b1 = +0.9807;   b2 = 0.8672;   b3 = +1.0795;  b4 = +1.0385;
	} else {
		a1 = +2.41E-9;  a2 = +0.06745; a3 = +0.05471; a4 = +0.5686;
		b1 = +1.144;    b2 = +0.995;   b3 = +0.5686;  b4 = +0.946;
	}
	return (a1 * mc_exp(x * b1) + a2 * mc_exp(x * b2) + a3 * mc_exp(x * b3) + a4 * mc_exp(x * b4));
}

MC_TARGET_PROC long double mc_besseli0l_approx1(long double x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	long double a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	long double b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5L) {
		a1 = +0.1682L;   a2 = +0.1472L;  a3 = +0.4450L;  a4 = +0.2382L;
		b1 = +0.7536L;   b2 = +0.9739L;  b3 = -0.715L;   b4 = +0.2343L;
	} else if (x < 20.0L) {
		a1 = +0.2667L;   a2 = +0.4916L;  a3 = +0.1110L;  a4 = +0.1304L;
		b1 = +0.4710L;   b2 = -163.4L;   b3 = +0.9852L;  b4 = +0.8554L;
	} else if (x < 37.25L) {
		a1 = +0.1121L;   a2 = 0.1055L;   a3 = -0.00018L; a4 = +0.00326L;
		b1 = +0.9807L;   b2 = 0.8672L;   b3 = +1.0795L;  b4 = +1.0385L;
	} else {
		a1 = +2.41E-9L;  a2 = +0.06745L; a3 = +0.05471L; a4 = +0.5686L;
		b1 = +1.144L;    b2 = +0.995L;   b3 = +0.5686L;  b4 = +0.946L;
	}
	return (a1 * mc_expl(x * b1) + a2 * mc_expl(x * b2) + a3 * mc_expl(x * b3) + a4 * mc_expl(x * b4));
}

#pragma mark - mc_besseli1_approx1 -

MC_TARGET_PROC float mc_besseli1f_approx1(float x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	float a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	float b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5f) {
		a1 = +0.1682f;   a2 = +0.1472f;  a3 = +0.4450f;  a4 = +0.2382f;
		b1 = +0.7536f;   b2 = +0.9739f;  b3 = -0.715f;   b4 = +0.2343f;
	} else if (x < 20.0f) {
		a1 = +0.2667f;   a2 = +0.4916f;  a3 = +0.1110f;  a4 = +0.1304f;
		b1 = +0.4710f;   b2 = -163.4f;   b3 = +0.9852f;  b4 = +0.8554f;
	} else if (x < 37.25f) {
		a1 = +0.1121f;   a2 = 0.1055f;   a3 = -0.00018f; a4 = +0.00326f;
		b1 = +0.9807f;   b2 = 0.8672f;   b3 = +1.0795f;  b4 = +1.0385f;
	} else {
		a1 = +2.41E-9f;  a2 = +0.06745f; a3 = +0.05471f; a4 = +0.5686f;
		b1 = +1.144f;    b2 = +0.995f;   b3 = +0.5686f;  b4 = +0.946f;
	}
	return (a1 * b1 * mc_expf(x * b1) + a2 * b2 * mc_expf(x * b2) + a3 * b3 + mc_expf(x * b3) + a4 * b4 * mc_expf(x * b4));
}

MC_TARGET_PROC double mc_besseli1_approx1(double x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	double a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	double b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5) {
		a1 = +0.1682;   a2 = +0.1472;  a3 = +0.4450;  a4 = +0.2382;
		b1 = +0.7536;   b2 = +0.9739;  b3 = -0.715;   b4 = +0.2343;
	} else if (x < 20.0) {
		a1 = +0.2667;   a2 = +0.4916;  a3 = +0.1110;  a4 = +0.1304;
		b1 = +0.4710;   b2 = -163.4;   b3 = +0.9852;  b4 = +0.8554;
	} else if (x < 37.25) {
		a1 = +0.1121;   a2 = 0.1055;   a3 = -0.00018; a4 = +0.00326;
		b1 = +0.9807;   b2 = 0.8672;   b3 = +1.0795;  b4 = +1.0385;
	} else {
		a1 = +2.41E-9;  a2 = +0.06745; a3 = +0.05471; a4 = +0.5686;
		b1 = +1.144;    b2 = +0.995;   b3 = +0.5686;  b4 = +0.946;
	}
	return (a1 * b1 * mc_exp(x * b1) + a2 * b2 * mc_exp(x * b2) + a3 * b3 + mc_exp(x * b3) + a4 * b4 * mc_exp(x * b4));
}

MC_TARGET_PROC long double mc_besseli1l_approx1(long double x)
{
//!# DOI: 10.1109/IEEEGCC.2013.6705802
	long double a1 = 0, a2 = 0, a3 = 0, a4 = 0;
	long double b1 = 0, b2 = 0, b3 = 0, b4 = 0;
	if (x < 11.5L) {
		a1 = +0.1682L;   a2 = +0.1472L;  a3 = +0.4450L;  a4 = +0.2382L;
		b1 = +0.7536L;   b2 = +0.9739L;  b3 = -0.715L;   b4 = +0.2343L;
	} else if (x < 20.0L) {
		a1 = +0.2667L;   a2 = +0.4916L;  a3 = +0.1110L;  a4 = +0.1304L;
		b1 = +0.4710L;   b2 = -163.4L;   b3 = +0.9852L;  b4 = +0.8554L;
	} else if (x < 37.25L) {
		a1 = +0.1121L;   a2 = 0.1055L;   a3 = -0.00018L; a4 = +0.00326L;
		b1 = +0.9807L;   b2 = 0.8672L;   b3 = +1.0795L;  b4 = +1.0385L;
	} else {
		a1 = +2.41E-9L;  a2 = +0.06745L; a3 = +0.05471L; a4 = +0.5686L;
		b1 = +1.144L;    b2 = +0.995L;   b3 = +0.5686L;  b4 = +0.946L;
	}
	return (a1 * b1 * mc_expl(x * b1) + a2 * b2 * mc_expl(x * b2) + a3 * b3 + mc_expl(x * b3) + a4 * b4 * mc_expl(x * b4));
}

#pragma mark - mc_besselin_approx1 -

MC_TARGET_PROC float mc_besselinf_approx1(int n, float x)
{
	float i0 = mc_besseli0f_approx1(x);
	float i1 = mc_besseli1f_approx1(x);
	float in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0f / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC double mc_besselin_approx1(int n, double x)
{
	double i0 = mc_besseli0_approx1(x);
	double i1 = mc_besseli1_approx1(x);
	double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0 / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC long double mc_besselinl_approx1(int n, long double x)
{
	long double i0 = mc_besseli0l_approx1(x);
	long double i1 = mc_besseli1l_approx1(x);
	long double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0L / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

#pragma mark - mc_besseli0_approx2 -

MC_TARGET_PROC float mc_besseli0f_approx2(float x)
{
	const float A[] =
	{
		  -1.3000250099862480421200000000000000000E-8f
		, +6.0469950225419189493200000000000000000E-8f
		, -2.6707938539406117339100000000000000000E-7f
		, +1.1173875391201037181500000000000000000E-6f
		, -4.4167383584587505635900000000000000000E-6f
		, +1.6448448070728897089300000000000000000E-5f
		, -5.7541950100821037039800000000000000000E-5f
		, +1.8850288509584165572900000000000000000E-4f
		, -5.7637557453858236588500000000000000000E-4f
		, +1.6394756169413357984200000000000000000E-3f
		, -4.3243099950505759443000000000000000000E-3f
		, +1.0546460394594998318300000000000000000E-2f
		, -2.3737414805899468815600000000000000000E-2f
		, +4.9305284239670708487800000000000000000E-2f
		, -9.4901097048047644421000000000000000000E-2f
		, +1.7162090152220877534900000000000000000E-1f
		, -3.0468267234319839868300000000000000000E-1f
		, +6.7679527440947608499500000000000000000E-1f
	};

	static float B[] =
	{
		  +3.3962320257083863451500000000000000000E-9f
		, +2.2666689904981780645900000000000000000E-8f
		, +2.0489185894690637418300000000000000000E-7f
		, +2.8913705208347564829700000000000000000E-6f
		, +6.8897583469168239842600000000000000000E-5f
		, +3.3691164782556940899000000000000000000E-3f
		, +8.0449041101410883160800000000000000000E-1f
	};

	float y = mc_fabsf(x), r = ((y <= 8.0f)
		? (mc_expf(y) * mc_xchebevalnf((0.5f * y) - 2.0f, A, 18))
		: (mc_expf(y) * mc_xchebevalnf(32.0f / y - 2.0f, B, 7)) * mc_rsqrtf(y)
	);
	return r;
}

MC_TARGET_PROC double mc_besseli0_approx2(double x)
{
	const double A[] =
	{
		  -4.41534164647933937950000000000000000000000E-18
		, +3.33079451882223809783000000000000000000000E-17
		, -2.43127984654795469359000000000000000000000E-16
		, +1.71539128555513303061000000000000000000000E-15
		, -1.16853328779934516808000000000000000000000E-14
		, +7.67618549860493561688000000000000000000000E-14
		, -4.85644678311192946090000000000000000000000E-13
		, +2.95505266312963983461000000000000000000000E-12
		, -1.72682629144155570723000000000000000000000E-11
		, +9.67580903537323691224000000000000000000000E-11
		, -5.18979560163526290666000000000000000000000E-10
		, +2.65982372468238665035000000000000000000000E-9
		, -1.30002500998624804212000000000000000000000E-8
		, +6.04699502254191894932000000000000000000000E-8
		, -2.67079385394061173391000000000000000000000E-7
		, +1.11738753912010371815000000000000000000000E-6
		, -4.41673835845875056359000000000000000000000E-6
		, +1.64484480707288970893000000000000000000000E-5
		, -5.75419501008210370398000000000000000000000E-5
		, +1.88502885095841655729000000000000000000000E-4
		, -5.76375574538582365885000000000000000000000E-4
		, +1.63947561694133579842000000000000000000000E-3
		, -4.32430999505057594430000000000000000000000E-3
		, +1.05464603945949983183000000000000000000000E-2
		, -2.37374148058994688156000000000000000000000E-2
		, +4.93052842396707084878000000000000000000000E-2
		, -9.49010970480476444210000000000000000000000E-2
		, +1.71620901522208775349000000000000000000000E-1
		, -3.04682672343198398683000000000000000000000E-1
		, +6.76795274409476084995000000000000000000000E-1
	};

	static double B[] =
	{
		  -7.23318048787475395456000000000000000000000E-18
		, -4.83050448594418207126000000000000000000000E-18
		, +4.46562142029675999901000000000000000000000E-17
		, +3.46122286769746109310000000000000000000000E-17
		, -2.82762398051658348494000000000000000000000E-16
		, -3.42548561967721913462000000000000000000000E-16
		, +1.77256013305652638360000000000000000000000E-15
		, +3.81168066935262242075000000000000000000000E-15
		, -9.55484669882830764870000000000000000000000E-15
		, -4.15056934728722208663000000000000000000000E-14
		, +1.54008621752140982691000000000000000000000E-14
		, +3.85277838274214270114000000000000000000000E-13
		, +7.18012445138366623367000000000000000000000E-13
		, -1.79417853150680611778000000000000000000000E-12
		, -1.32158118404477131188000000000000000000000E-11
		, -3.14991652796324136454000000000000000000000E-11
		, +1.18891471078464383424000000000000000000000E-11
		, +4.94060238822496958910000000000000000000000E-10
		, +3.39623202570838634515000000000000000000000E-9
		, +2.26666899049817806459000000000000000000000E-8
		, +2.04891858946906374183000000000000000000000E-7
		, +2.89137052083475648297000000000000000000000E-6
		, +6.88975834691682398426000000000000000000000E-5
		, +3.36911647825569408990000000000000000000000E-3
		, +8.04490411014108831608000000000000000000000E-1
	};

	double y = mc_fabs(x), r = ((y <= 8.0)
		? (mc_exp(y) * mc_xchebevaln((0.5 * y) - 2.0, A, 30))
		: (mc_exp(y) * mc_xchebevaln(32.0 / y - 2.0, B, 25)) * mc_rsqrt(y)
	);
	return r;
}

MC_TARGET_PROC long double mc_besseli0l_approx2(long double x)
{
#	if !MC_TARGET_MSVC_CPP
	const long double A[] =
	{
		  -4.415341646479339379500000000000000000000000000000000000000000000E-18L
		, +3.330794518822238097830000000000000000000000000000000000000000000E-17L
		, -2.431279846547954693590000000000000000000000000000000000000000000E-16L
		, +1.715391285555133030610000000000000000000000000000000000000000000E-15L
		, -1.168533287799345168080000000000000000000000000000000000000000000E-14L
		, +7.676185498604935616880000000000000000000000000000000000000000000E-14L
		, -4.856446783111929460900000000000000000000000000000000000000000000E-13L
		, +2.955052663129639834610000000000000000000000000000000000000000000E-12L
		, -1.726826291441555707230000000000000000000000000000000000000000000E-11L
		, +9.675809035373236912240000000000000000000000000000000000000000000E-11L
		, -5.189795601635262906660000000000000000000000000000000000000000000E-10L
		, +2.659823724682386650350000000000000000000000000000000000000000000E-9L
		, -1.300025009986248042120000000000000000000000000000000000000000000E-8L
		, +6.046995022541918949320000000000000000000000000000000000000000000E-8L
		, -2.670793853940611733910000000000000000000000000000000000000000000E-7L
		, +1.117387539120103718150000000000000000000000000000000000000000000E-6L
		, -4.416738358458750563590000000000000000000000000000000000000000000E-6L
		, +1.644844807072889708930000000000000000000000000000000000000000000E-5L
		, -5.754195010082103703980000000000000000000000000000000000000000000E-5L
		, +1.885028850958416557290000000000000000000000000000000000000000000E-4L
		, -5.763755745385823658850000000000000000000000000000000000000000000E-4L
		, +1.639475616941335798420000000000000000000000000000000000000000000E-3L
		, -4.324309995050575944300000000000000000000000000000000000000000000E-3L
		, +1.054646039459499831830000000000000000000000000000000000000000000E-2L
		, -2.373741480589946881560000000000000000000000000000000000000000000E-2L
		, +4.930528423967070848780000000000000000000000000000000000000000000E-2L
		, -9.490109704804764442100000000000000000000000000000000000000000000E-2L
		, +1.716209015222087753490000000000000000000000000000000000000000000E-1L
		, -3.046826723431983986830000000000000000000000000000000000000000000E-1L
		, +6.767952744094760849950000000000000000000000000000000000000000000E-1L
	};

	static long double B[] =
	{
		  -7.233180487874753954560000000000000000000000000000000000000000000E-18L
		, -4.830504485944182071260000000000000000000000000000000000000000000E-18L
		, +4.465621420296759999010000000000000000000000000000000000000000000E-17L
		, +3.461222867697461093100000000000000000000000000000000000000000000E-17L
		, -2.827623980516583484940000000000000000000000000000000000000000000E-16L
		, -3.425485619677219134620000000000000000000000000000000000000000000E-16L
		, +1.772560133056526383600000000000000000000000000000000000000000000E-15L
		, +3.811680669352622420750000000000000000000000000000000000000000000E-15L
		, -9.554846698828307648700000000000000000000000000000000000000000000E-15L
		, -4.150569347287222086630000000000000000000000000000000000000000000E-14L
		, +1.540086217521409826910000000000000000000000000000000000000000000E-14L
		, +3.852778382742142701140000000000000000000000000000000000000000000E-13L
		, +7.180124451383666233670000000000000000000000000000000000000000000E-13L
		, -1.794178531506806117780000000000000000000000000000000000000000000E-12L
		, -1.321581184044771311880000000000000000000000000000000000000000000E-11L
		, -3.149916527963241364540000000000000000000000000000000000000000000E-11L
		, +1.188914710784643834240000000000000000000000000000000000000000000E-11L
		, +4.940602388224969589100000000000000000000000000000000000000000000E-10L
		, +3.396232025708386345150000000000000000000000000000000000000000000E-9L
		, +2.266668990498178064590000000000000000000000000000000000000000000E-8L
		, +2.048918589469063741830000000000000000000000000000000000000000000E-7L
		, +2.891370520834756482970000000000000000000000000000000000000000000E-6L
		, +6.889758346916823984260000000000000000000000000000000000000000000E-5L
		, +3.369116478255694089900000000000000000000000000000000000000000000E-3L
		, +8.044904110141088316080000000000000000000000000000000000000000000E-1L
	};

	long double y = mc_fabsl(x), r = ((y <= 8.0L)
		? (mc_expl(y) * mc_xchebevalnl((0.5L * y) - 2.0L, A, 30))
		: (mc_expl(y) * mc_xchebevalnl(32.0L / y - 2.0L, B, 25)) * mc_rsqrtl(y)
	);
	return r;
#	else
	return mc_cast(long double, mc_besseli0_approx2(mc_cast(double, x)));
#	endif
}

#pragma mark - mc_besseli1_approx2 -

MC_TARGET_PROC float mc_besseli1f_approx2(float x)
{
	const float A[] =
	{
		  +9.3815373864957717838800000000000000000E-9f
		, -4.4450591287963280806500000000000000000E-8f
		, +2.0032947535521352622900000000000000000E-7f
		, -8.5687202646954547406600000000000000000E-7f
		, +3.4702513081376784767400000000000000000E-6f
		, -1.3273163656039435827900000000000000000E-5f
		, +4.7815651075500542263800000000000000000E-5f
		, -1.6176081582589674558800000000000000000E-4f
		, +5.1228595616857577289500000000000000000E-4f
		, -1.5135724506312531489900000000000000000E-3f
		, +4.1564229443128881566900000000000000000E-3f
		, -1.0564084894626198155800000000000000000E-2f
		, +2.4726449030626516828300000000000000000E-2f
		, -5.2945981208094991426900000000000000000E-2f
		, +1.0264365868984709538400000000000000000E-1f
		, -1.7641651835783405515300000000000000000E-1f
		, +2.5258718644363365482300000000000000000E-1f
	};

	static float B[] =
	{
		  -3.8353803859642370220500000000000000000E-9f
		, -2.6314688468895195068400000000000000000E-8f
		, -2.5122362378702089252900000000000000000E-7f
		, -3.8825648088776903934600000000000000000E-6f
		, -1.1058893876262371629100000000000000000E-4f
		, -9.7610974913614684077700000000000000000E-3f
		, +7.7857623501828012047400000000000000000E-1f
	};

	float y = mc_fabsf(x), r = ((y <= 8.0f)
		? (mc_xchebevalnf((0.5f * y) - 2.0f, A, 17) * y * mc_expf(y))
		: (mc_expf(y) * mc_xchebevalnf(32.0f / y - 2.0f, B, 7)) * mc_rsqrtf(y)
	);
	return x < 0.0f ? -r : r;
}

MC_TARGET_PROC double mc_besseli1_approx2(double x)
{
	const double A[] =
	{
		  +2.7779141127610463995900000000000000000000E-18
		, -2.1114212143581660811500000000000000000000E-17
		, +1.5536319577362004692100000000000000000000E-16
		, -1.1055969477353863080500000000000000000000E-15
		, +7.6006842947354069341000000000000000000000E-15
		, -5.0421855047279116871100000000000000000000E-14
		, +3.2237933659455747098100000000000000000000E-13
		, -1.9839743977649437152000000000000000000000E-12
		, +1.1736186298890901630800000000000000000000E-11
		, -6.6634897235020277422300000000000000000000E-11
		, +3.6255902815521170370100000000000000000000E-10
		, -1.8872497517228292879000000000000000000000E-9
		, +9.3815373864957717838800000000000000000000E-9
		, -4.4450591287963280806500000000000000000000E-8
		, +2.0032947535521352622900000000000000000000E-7
		, -8.5687202646954547406600000000000000000000E-7
		, +3.4702513081376784767400000000000000000000E-6
		, -1.3273163656039435827900000000000000000000E-5
		, +4.7815651075500542263800000000000000000000E-5
		, -1.6176081582589674558800000000000000000000E-4
		, +5.1228595616857577289500000000000000000000E-4
		, -1.5135724506312531489900000000000000000000E-3
		, +4.1564229443128881566900000000000000000000E-3
		, -1.0564084894626198155800000000000000000000E-2
		, +2.4726449030626516828300000000000000000000E-2
		, -5.2945981208094991426900000000000000000000E-2
		, +1.0264365868984709538400000000000000000000E-1
		, -1.7641651835783405515300000000000000000000E-1
		, +2.5258718644363365482300000000000000000000E-1
	};

	static double B[] =
	{
		  +7.5172963108421048135300000000000000000000E-18
		, +4.4143483230717079115100000000000000000000E-18
		, -4.6503053684893583215300000000000000000000E-17
		, -3.2095259219934239598000000000000000000000E-17
		, +2.9626289976459501387600000000000000000000E-16
		, +3.3082023109209282832400000000000000000000E-16
		, -1.8803547755107824485400000000000000000000E-15
		, -3.8144030724370078047800000000000000000000E-15
		, +1.0420276984128802764200000000000000000000E-14
		, +4.2724400167119513542900000000000000000000E-14
		, -2.1015418427726643130200000000000000000000E-14
		, -4.0835511110921973182300000000000000000000E-13
		, -7.1985517762459085120900000000000000000000E-13
		, +2.0356285441470895072200000000000000000000E-12
		, +1.4125807436613781331600000000000000000000E-11
		, +3.2526035830154882385600000000000000000000E-11
		, -1.8974958123505412345000000000000000000000E-11
		, -5.5897434621965838068700000000000000000000E-10
		, -3.8353803859642370220500000000000000000000E-9
		, -2.6314688468895195068400000000000000000000E-8
		, -2.5122362378702089252900000000000000000000E-7
		, -3.8825648088776903934600000000000000000000E-6
		, -1.1058893876262371629100000000000000000000E-4
		, -9.7610974913614684077700000000000000000000E-3
		, +7.7857623501828012047400000000000000000000E-1
	};

	double y = mc_fabs(x), r = ((y <= 8.0)
		? (mc_xchebevaln((0.5 * y) - 2.0, A, 29) * y * mc_exp(y))
		: (mc_exp(y) * mc_xchebevaln(32.0 / y - 2.0, B, 25)) * mc_rsqrt(y)
	);
	return x < 0.0 ? -r : r;
}

MC_TARGET_PROC long double mc_besseli1l_approx2(long double x)
{
#	if !MC_TARGET_MSVC_CPP
	const long double A[] =
	{
		  +2.777914112761046399590000000000000000000000000000000000000000000E-18L
		, -2.111421214358166081150000000000000000000000000000000000000000000E-17L
		, +1.553631957736200469210000000000000000000000000000000000000000000E-16L
		, -1.105596947735386308050000000000000000000000000000000000000000000E-15L
		, +7.600684294735406934100000000000000000000000000000000000000000000E-15L
		, -5.042185504727911687110000000000000000000000000000000000000000000E-14L
		, +3.223793365945574709810000000000000000000000000000000000000000000E-13L
		, -1.983974397764943715200000000000000000000000000000000000000000000E-12L
		, +1.173618629889090163080000000000000000000000000000000000000000000E-11L
		, -6.663489723502027742230000000000000000000000000000000000000000000E-11L
		, +3.625590281552117037010000000000000000000000000000000000000000000E-10L
		, -1.887249751722829287900000000000000000000000000000000000000000000E-9L
		, +9.381537386495771783880000000000000000000000000000000000000000000E-9L
		, -4.445059128796328080650000000000000000000000000000000000000000000E-8L
		, +2.003294753552135262290000000000000000000000000000000000000000000E-7L
		, -8.568720264695454740660000000000000000000000000000000000000000000E-7L
		, +3.470251308137678476740000000000000000000000000000000000000000000E-6L
		, -1.327316365603943582790000000000000000000000000000000000000000000E-5L
		, +4.781565107550054226380000000000000000000000000000000000000000000E-5L
		, -1.617608158258967455880000000000000000000000000000000000000000000E-4L
		, +5.122859561685757728950000000000000000000000000000000000000000000E-4L
		, -1.513572450631253148990000000000000000000000000000000000000000000E-3L
		, +4.156422944312888156690000000000000000000000000000000000000000000E-3L
		, -1.056408489462619815580000000000000000000000000000000000000000000E-2L
		, +2.472644903062651682830000000000000000000000000000000000000000000E-2L
		, -5.294598120809499142690000000000000000000000000000000000000000000E-2L
		, +1.026436586898470953840000000000000000000000000000000000000000000E-1L
		, -1.764165183578340551530000000000000000000000000000000000000000000E-1L
		, +2.525871864436336548230000000000000000000000000000000000000000000E-1L
	};

	static long double B[] =
	{
		  +7.517296310842104813530000000000000000000000000000000000000000000E-18L
		, +4.414348323071707911510000000000000000000000000000000000000000000E-18L
		, -4.650305368489358321530000000000000000000000000000000000000000000E-17L
		, -3.209525921993423959800000000000000000000000000000000000000000000E-17L
		, +2.962628997645950138760000000000000000000000000000000000000000000E-16L
		, +3.308202310920928283240000000000000000000000000000000000000000000E-16L
		, -1.880354775510782448540000000000000000000000000000000000000000000E-15L
		, -3.814403072437007804780000000000000000000000000000000000000000000E-15L
		, +1.042027698412880276420000000000000000000000000000000000000000000E-14L
		, +4.272440016711951354290000000000000000000000000000000000000000000E-14L
		, -2.101541842772664313020000000000000000000000000000000000000000000E-14L
		, -4.083551111092197318230000000000000000000000000000000000000000000E-13L
		, -7.198551776245908512090000000000000000000000000000000000000000000E-13L
		, +2.035628544147089507220000000000000000000000000000000000000000000E-12L
		, +1.412580743661378133160000000000000000000000000000000000000000000E-11L
		, +3.252603583015488238560000000000000000000000000000000000000000000E-11L
		, -1.897495812350541234500000000000000000000000000000000000000000000E-11L
		, -5.589743462196583806870000000000000000000000000000000000000000000E-10L
		, -3.835380385964237022050000000000000000000000000000000000000000000E-9L
		, -2.631468846889519506840000000000000000000000000000000000000000000E-8L
		, -2.512236237870208925290000000000000000000000000000000000000000000E-7L
		, -3.882564808877690393460000000000000000000000000000000000000000000E-6L
		, -1.105889387626237162910000000000000000000000000000000000000000000E-4L
		, -9.761097491361468407770000000000000000000000000000000000000000000E-3L
		, +7.785762350182801204740000000000000000000000000000000000000000000E-1L
	};

	long double y = mc_fabsl(x), r = ((y <= 8.0L)
		? (mc_xchebevalnl((0.5L * y) - 2.0L, A, 29) * y * mc_expl(y))
		: (mc_expl(y) * mc_xchebevalnl(32.0L / y - 2.0L, B, 25)) * mc_rsqrtl(y)
	);
	return x < 0.0L ? -r : r;
#	else
	return mc_cast(long double, mc_besseli1_approx2(mc_cast(double, x)));
#	endif
}

#pragma mark - mc_besselin_approx2 -

MC_TARGET_PROC float mc_besselinf_approx2(int n, float x)
{
	float i0 = mc_besseli0f_approx2(x);
	float i1 = mc_besseli1f_approx2(x);
	float in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0f / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC double mc_besselin_approx2(int n, double x)
{
	double i0 = mc_besseli0_approx2(x);
	double i1 = mc_besseli1_approx2(x);
	double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0 / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

MC_TARGET_PROC long double mc_besselinl_approx2(int n, long double x)
{
	long double i0 = mc_besseli0l_approx2(x);
	long double i1 = mc_besseli1l_approx2(x);
	long double in = 0;
	int i     = 1;
	if (n == 0) {
		return i0;
	}
	if (n == 1) {
		return i1;
	}
	for(; i < n; i++){
		in = i0 - (2.0L / x) * i * i1;
		i0 = i1;
		i1 = in;
	}
	return in;
}

#pragma mark - mc_besseli0 -

MC_TARGET_FUNC float mc_besseli0f(float x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli0f_approx1(x);
#	else
	return mc_besseli0f_approx2(x);
#	endif
}

MC_TARGET_FUNC double mc_besseli0(double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli0_approx1(x);
#	else
	return mc_besseli0_approx2(x);
#	endif
}

MC_TARGET_FUNC long double mc_besseli0l(long double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli0l_approx1(x);
#	else
	return mc_besseli0l_approx2(x);
#	endif
}

#pragma mark - mc_besseli1 -

MC_TARGET_FUNC float mc_besseli1f(float x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli1f_approx1(x);
#	else
	return mc_besseli1f_approx2(x);
#	endif
}

MC_TARGET_FUNC double mc_besseli1(double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli1_approx1(x);
#	else
	return mc_besseli1_approx2(x);
#	endif
}

MC_TARGET_FUNC long double mc_besseli1l(long double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besseli1l_approx1(x);
#	else
	return mc_besseli1l_approx2(x);
#	endif
}

#pragma mark - mc_besselin -

MC_TARGET_FUNC float mc_besselinf(int n, float x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besselinf_approx1(n, x);
#	else
	return mc_besselinf_approx2(n, x);
#	endif
}

MC_TARGET_FUNC double mc_besselin(int n, double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besselin_approx1(n, x);
#	else
	return mc_besselin_approx2(n, x);
#	endif
}

MC_TARGET_FUNC long double mc_besselinl(int n, long double x)
{
#	if MC_TARGET_EMBEDDED
	return mc_besselinl_approx1(n, x);
#	else
	return mc_besselinl_approx2(n, x);
#	endif
}

#endif /* !MC_BESSELI_H */

/* EOF */